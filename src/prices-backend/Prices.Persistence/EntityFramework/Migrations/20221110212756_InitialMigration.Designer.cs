// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Prices.Persistence.EntityFramework;

#nullable disable

namespace Prices.Persistence.EntityFramework.Migrations
{
    [DbContext(typeof(PricesContext))]
    [Migration("20221110212756_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Prices.Core.Domain.Models.IntervalEndTimeUtcScalar", b =>
                {
                    b.Property<Instant>("IntervalEndTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.ToTable("IntervalEndTimeUtcScalar");
                });

            modelBuilder.Entity("Prices.Core.Domain.Models.Price", b =>
                {
                    b.Property<int>("PriceIndexId")
                        .HasColumnType("integer");

                    b.Property<int>("PricingNodeId")
                        .HasColumnType("integer");

                    b.Property<Instant>("IntervalEndTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CongestionPrice")
                        .HasColumnType("numeric(19,9)");

                    b.Property<decimal>("EnergyPrice")
                        .HasColumnType("numeric(19,9)");

                    b.Property<int>("IntervalLength")
                        .HasColumnType("integer");

                    b.Property<Instant>("IntervalStartTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("LastModifiedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("LmpPrice")
                        .HasColumnType("numeric(19,9)");

                    b.Property<decimal>("LossPrice")
                        .HasColumnType("numeric(19,9)");

                    b.Property<string>("PricingNodeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.HasKey("PriceIndexId", "PricingNodeId", "IntervalEndTimeUtc");

                    b.HasIndex("PricingNodeId");

                    b.HasIndex(new[] { "PriceIndexId", "IntervalEndTimeUtc" }, "IX_Prices_PriceIndexId_IntervalEndTimeUtc");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "PriceIndexId", "IntervalEndTimeUtc" }, "IX_Prices_PriceIndexId_IntervalEndTimeUtc"), new[] { "PricingNodeId", "LmpPrice" });

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("Prices.Core.Domain.Models.PriceIndex", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("PriceMarketId")
                        .HasColumnType("integer");

                    b.Property<int>("RegionalTransmissionOperatorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_PriceIndexes_Name")
                        .IsUnique();

                    b.HasIndex(new[] { "PriceMarketId" }, "IX_PriceIndexes_PriceMarketId");

                    b.HasIndex(new[] { "RegionalTransmissionOperatorId" }, "IX_PriceIndexes_RegionalTransmissionOperatorId");

                    b.HasIndex(new[] { "RegionalTransmissionOperatorId", "PriceMarketId" }, "IX_PriceIndexes_RegionalTransmissionOperatorId_PriceMarketId");

                    b.ToTable("PriceIndexes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CAISO - Day-Ahead",
                            PriceMarketId = 1,
                            RegionalTransmissionOperatorId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "CAISO - Real-Time",
                            PriceMarketId = 2,
                            RegionalTransmissionOperatorId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "ERCOT - Day-Ahead",
                            PriceMarketId = 1,
                            RegionalTransmissionOperatorId = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "ERCOT - Real-Time",
                            PriceMarketId = 2,
                            RegionalTransmissionOperatorId = 2
                        });
                });

            modelBuilder.Entity("Prices.Core.Domain.Models.PriceMarket", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Abbreviation" }, "IX_PriceMarkets_Abbreviation")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "IX_PriceMarkets_Name")
                        .IsUnique();

                    b.ToTable("PriceMarkets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "DAM",
                            Name = "Day-Ahead"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "RTM",
                            Name = "Real-Time"
                        });
                });

            modelBuilder.Entity("Prices.Core.Domain.Models.PricesFile", b =>
                {
                    b.Property<string>("BlobName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("character varying(200)");

                    b.Property<Instant>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DocumentId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<Instant>("EndDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileSourceUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2048)");

                    b.Property<int>("PriceIndexId")
                        .HasColumnType("integer");

                    b.Property<int>("PriceTypeId")
                        .HasColumnType("integer");

                    b.Property<Instant>("StartDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VirtualFolder")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.HasKey("BlobName");

                    b.HasIndex("PriceIndexId");

                    b.HasIndex(new[] { "PriceTypeId" }, "IX_PricesFiles_PriceTypeId");

                    b.ToTable("PricesFiles");
                });

            modelBuilder.Entity("Prices.Core.Domain.Models.PriceType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("PriceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Historical"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Daily"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Current"
                        });
                });

            modelBuilder.Entity("Prices.Core.Domain.Models.PricingNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Change24Hour")
                        .HasColumnType("numeric(19,9)");

                    b.Property<Instant>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("CurrentPrice")
                        .HasColumnType("numeric(19,9)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<Instant?>("EndDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("LastModifiedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("PricingNodeTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("RegionalTransmissionOperatorId")
                        .HasColumnType("integer");

                    b.Property<Instant?>("StartDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PricingNodeTypeId" }, "IX_PricingNodes_PricingNodeTypeId");

                    b.HasIndex(new[] { "RegionalTransmissionOperatorId", "DisplayName" }, "IX_PricingNodes_RegionalTransmissionOperatorId_DisplayName")
                        .IsUnique()
                        .HasFilter("('DisplayName' IS NOT NULL)");

                    b.HasIndex(new[] { "RegionalTransmissionOperatorId", "Name" }, "IX_PricingNodes_RegionalTransmissionOperatorId_Name")
                        .IsUnique();

                    b.ToTable("PricingNodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            DisplayName = "NP15",
                            LastModifiedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            Name = "TH_NP15_GEN-APND",
                            PricingNodeTypeId = 1,
                            RegionalTransmissionOperatorId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            DisplayName = "SP15",
                            LastModifiedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            Name = "TH_SP15_GEN-APND",
                            PricingNodeTypeId = 1,
                            RegionalTransmissionOperatorId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            DisplayName = "ZP26",
                            LastModifiedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            Name = "TH_ZP26_GEN-APND",
                            PricingNodeTypeId = 1,
                            RegionalTransmissionOperatorId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            DisplayName = "PGE",
                            LastModifiedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            Name = "DLAP_PGAE-APND",
                            PricingNodeTypeId = 2,
                            RegionalTransmissionOperatorId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            DisplayName = "SCE",
                            LastModifiedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            Name = "DLAP_SCE-APND",
                            PricingNodeTypeId = 2,
                            RegionalTransmissionOperatorId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            DisplayName = "SDGE",
                            LastModifiedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            Name = "DLAP_SDGE-APND",
                            PricingNodeTypeId = 2,
                            RegionalTransmissionOperatorId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            DisplayName = "VEA",
                            LastModifiedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            Name = "DLAP_VEA-APND",
                            PricingNodeTypeId = 2,
                            RegionalTransmissionOperatorId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            DisplayName = "HB_BUSAVG",
                            LastModifiedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            Name = "HB_BUSAVG",
                            PricingNodeTypeId = 1,
                            RegionalTransmissionOperatorId = 2
                        },
                        new
                        {
                            Id = 9,
                            CreatedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            DisplayName = "HB_HOUSTON",
                            LastModifiedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            Name = "HB_HOUSTON",
                            PricingNodeTypeId = 1,
                            RegionalTransmissionOperatorId = 2
                        },
                        new
                        {
                            Id = 10,
                            CreatedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            DisplayName = "HB_HUBAVG",
                            LastModifiedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            Name = "HB_HUBAVG",
                            PricingNodeTypeId = 1,
                            RegionalTransmissionOperatorId = 2
                        },
                        new
                        {
                            Id = 11,
                            CreatedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            DisplayName = "HB_NORTH",
                            LastModifiedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            Name = "HB_NORTH",
                            PricingNodeTypeId = 1,
                            RegionalTransmissionOperatorId = 2
                        },
                        new
                        {
                            Id = 12,
                            CreatedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            DisplayName = "HB_SOUTH",
                            LastModifiedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            Name = "HB_SOUTH",
                            PricingNodeTypeId = 1,
                            RegionalTransmissionOperatorId = 2
                        },
                        new
                        {
                            Id = 13,
                            CreatedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            DisplayName = "HB_WEST",
                            LastModifiedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            Name = "HB_WEST",
                            PricingNodeTypeId = 1,
                            RegionalTransmissionOperatorId = 2
                        },
                        new
                        {
                            Id = 14,
                            CreatedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            DisplayName = "LZ_AEN",
                            LastModifiedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            Name = "LZ_AEN",
                            PricingNodeTypeId = 2,
                            RegionalTransmissionOperatorId = 2
                        },
                        new
                        {
                            Id = 15,
                            CreatedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            DisplayName = "LZ_CPS",
                            LastModifiedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            Name = "LZ_CPS",
                            PricingNodeTypeId = 2,
                            RegionalTransmissionOperatorId = 2
                        },
                        new
                        {
                            Id = 16,
                            CreatedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            DisplayName = "LZ_HOUSTON",
                            LastModifiedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            Name = "LZ_HOUSTON",
                            PricingNodeTypeId = 2,
                            RegionalTransmissionOperatorId = 2
                        },
                        new
                        {
                            Id = 17,
                            CreatedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            DisplayName = "LZ_LCRA",
                            LastModifiedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            Name = "LZ_LCRA",
                            PricingNodeTypeId = 2,
                            RegionalTransmissionOperatorId = 2
                        },
                        new
                        {
                            Id = 18,
                            CreatedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            DisplayName = "LZ_NORTH",
                            LastModifiedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            Name = "LZ_NORTH",
                            PricingNodeTypeId = 2,
                            RegionalTransmissionOperatorId = 2
                        },
                        new
                        {
                            Id = 19,
                            CreatedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            DisplayName = "LZ_RAYBN",
                            LastModifiedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            Name = "LZ_RAYBN",
                            PricingNodeTypeId = 2,
                            RegionalTransmissionOperatorId = 2
                        },
                        new
                        {
                            Id = 20,
                            CreatedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            DisplayName = "LZ_SOUTH",
                            LastModifiedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            Name = "LZ_SOUTH",
                            PricingNodeTypeId = 2,
                            RegionalTransmissionOperatorId = 2
                        },
                        new
                        {
                            Id = 21,
                            CreatedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            DisplayName = "LZ_WEST",
                            LastModifiedAtUtc = NodaTime.Instant.FromUnixTimeTicks(16681156760411555L),
                            Name = "LZ_WEST",
                            PricingNodeTypeId = 2,
                            RegionalTransmissionOperatorId = 2
                        });
                });

            modelBuilder.Entity("Prices.Core.Domain.Models.PricingNodeType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_PricingNodeTypes_Name")
                        .IsUnique();

                    b.ToTable("PricingNodeTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Description = "Unknown",
                            Name = "Unknown"
                        },
                        new
                        {
                            Id = 1,
                            Description = "Trading Hub",
                            Name = "Hub"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Default Load Aggregation Point",
                            Name = "DLAP"
                        });
                });

            modelBuilder.Entity("Prices.Core.Domain.Models.PricingNodeTypeMapping", b =>
                {
                    b.Property<int>("PricingNodeTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("RegionalTransmissionOperatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.HasKey("PricingNodeTypeId", "RegionalTransmissionOperatorId");

                    b.HasIndex(new[] { "RegionalTransmissionOperatorId" }, "IX_PricingNodeTypeMappings_RegionalTransmissionOperatorId");

                    b.ToTable("PricingNodeTypeMappings");

                    b.HasData(
                        new
                        {
                            PricingNodeTypeId = 1,
                            RegionalTransmissionOperatorId = 1,
                            Code = "TH"
                        },
                        new
                        {
                            PricingNodeTypeId = 2,
                            RegionalTransmissionOperatorId = 1,
                            Code = "DPZ"
                        });
                });

            modelBuilder.Entity("Prices.Core.Domain.Models.RegionalTransmissionOperator", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("LegalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LegalName" }, "IX_RegionalTransmissionOperators_LegalName")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "IX_RegionalTransmissionOperators_Name")
                        .IsUnique();

                    b.ToTable("RegionalTransmissionOperators");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LegalName = "California ISO",
                            Name = "CAISO"
                        },
                        new
                        {
                            Id = 2,
                            LegalName = "Electric Reliability Council of Texas",
                            Name = "ERCOT"
                        });
                });

            modelBuilder.Entity("Prices.Core.Domain.Models.PriceIndex", b =>
                {
                    b.HasOne("Prices.Core.Domain.Models.PriceMarket", "PriceMarket")
                        .WithMany("PriceIndexes")
                        .HasForeignKey("PriceMarketId")
                        .IsRequired()
                        .HasConstraintName("FK_PriceIndexes_PriceMarkets");

                    b.HasOne("Prices.Core.Domain.Models.RegionalTransmissionOperator", "RegionalTransmissionOperator")
                        .WithMany("PriceIndexes")
                        .HasForeignKey("RegionalTransmissionOperatorId")
                        .IsRequired()
                        .HasConstraintName("FK_PriceIndexes_RegionalTransmissionOperators");

                    b.Navigation("PriceMarket");

                    b.Navigation("RegionalTransmissionOperator");
                });

            modelBuilder.Entity("Prices.Core.Domain.Models.PricesFile", b =>
                {
                    b.HasOne("Prices.Core.Domain.Models.PriceIndex", "PriceIndex")
                        .WithMany("PricesFiles")
                        .HasForeignKey("PriceIndexId")
                        .IsRequired()
                        .HasConstraintName("FK_PricesFiles_PriceIndexes");

                    b.HasOne("Prices.Core.Domain.Models.PriceType", "PriceType")
                        .WithMany("PricesFiles")
                        .HasForeignKey("PriceTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_PricesFiles_PriceTypes");

                    b.Navigation("PriceIndex");

                    b.Navigation("PriceType");
                });

            modelBuilder.Entity("Prices.Core.Domain.Models.PricingNode", b =>
                {
                    b.HasOne("Prices.Core.Domain.Models.PricingNodeType", "PricingNodeType")
                        .WithMany("PricingNodes")
                        .HasForeignKey("PricingNodeTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_PricingNodes_PricingNodeTypes");

                    b.HasOne("Prices.Core.Domain.Models.RegionalTransmissionOperator", "RegionalTransmissionOperator")
                        .WithMany("PricingNodes")
                        .HasForeignKey("RegionalTransmissionOperatorId")
                        .IsRequired()
                        .HasConstraintName("FK_PricingNodes_RegionalTransmissionOperators");

                    b.Navigation("PricingNodeType");

                    b.Navigation("RegionalTransmissionOperator");
                });

            modelBuilder.Entity("Prices.Core.Domain.Models.PriceIndex", b =>
                {
                    b.Navigation("PricesFiles");
                });

            modelBuilder.Entity("Prices.Core.Domain.Models.PriceMarket", b =>
                {
                    b.Navigation("PriceIndexes");
                });

            modelBuilder.Entity("Prices.Core.Domain.Models.PriceType", b =>
                {
                    b.Navigation("PricesFiles");
                });

            modelBuilder.Entity("Prices.Core.Domain.Models.PricingNodeType", b =>
                {
                    b.Navigation("PricingNodes");
                });

            modelBuilder.Entity("Prices.Core.Domain.Models.RegionalTransmissionOperator", b =>
                {
                    b.Navigation("PriceIndexes");

                    b.Navigation("PricingNodes");
                });
#pragma warning restore 612, 618
        }
    }
}
